package pineapple.bd.com.pineapple.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import pineapple.bd.com.pineapple.db.UserAuth;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_AUTH".
*/
public class UserAuthDao extends AbstractDao<UserAuth, Long> {

    public static final String TABLENAME = "USER_AUTH";

    /**
     * Properties of entity UserAuth.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property User_id = new Property(1, Long.class, "user_id", false, "USER_ID");
        public final static Property Identity_type = new Property(2, Integer.class, "identity_type", false, "IDENTITY_TYPE");
        public final static Property Identify_unique_id  = new Property(3, String.class, "identify_unique_id ", false, "IDENTIFY_UNIQUE_ID ");
        public final static Property Credential = new Property(4, String.class, "credential", false, "CREDENTIAL");
        public final static Property Verified = new Property(5, Boolean.class, "verified", false, "VERIFIED");
    };


    public UserAuthDao(DaoConfig config) {
        super(config);
    }
    
    public UserAuthDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_AUTH\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_ID\" INTEGER," + // 1: user_id
                "\"IDENTITY_TYPE\" INTEGER," + // 2: identity_type
                "\"IDENTIFY_UNIQUE_ID \" TEXT," + // 3: identify_unique_id 
                "\"CREDENTIAL\" TEXT," + // 4: credential
                "\"VERIFIED\" INTEGER);"); // 5: verified
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_AUTH\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserAuth entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindLong(2, user_id);
        }
 
        Integer identity_type = entity.getIdentity_type();
        if (identity_type != null) {
            stmt.bindLong(3, identity_type);
        }
 
        String identify_unique_id  = entity.getIdentify_unique_id ();
        if (identify_unique_id  != null) {
            stmt.bindString(4, identify_unique_id );
        }
 
        String credential = entity.getCredential();
        if (credential != null) {
            stmt.bindString(5, credential);
        }
 
        Boolean verified = entity.getVerified();
        if (verified != null) {
            stmt.bindLong(6, verified ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UserAuth readEntity(Cursor cursor, int offset) {
        UserAuth entity = new UserAuth( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // user_id
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // identity_type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // identify_unique_id 
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // credential
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0 // verified
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserAuth entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUser_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setIdentity_type(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setIdentify_unique_id (cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCredential(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setVerified(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(UserAuth entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(UserAuth entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

package pineapple.bd.com.pineapple.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import pineapple.bd.com.pineapple.db.Music;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MUSIC".
*/
public class MusicDao extends AbstractDao<Music, Long> {

    public static final String TABLENAME = "MUSIC";

    /**
     * Properties of entity Music.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MediaType = new Property(1, Integer.class, "mediaType", false, "MEDIA_TYPE");
        public final static Property MusicType = new Property(2, Integer.class, "musicType", false, "MUSIC_TYPE");
        public final static Property Url = new Property(3, String.class, "url", false, "URL");
        public final static Property Singer = new Property(4, String.class, "singer", false, "SINGER");
        public final static Property Author = new Property(5, String.class, "author", false, "AUTHOR");
        public final static Property Poster_url = new Property(6, String.class, "poster_url", false, "POSTER_URL");
        public final static Property Lyrics_url = new Property(7, String.class, "lyrics_url", false, "LYRICS_URL");
        public final static Property Name = new Property(8, String.class, "name", false, "NAME");
        public final static Property Size = new Property(9, Long.class, "size", false, "SIZE");
        public final static Property Albums = new Property(10, String.class, "albums", false, "ALBUMS");
        public final static Property Quality = new Property(11, Integer.class, "quality", false, "QUALITY");
    };


    public MusicDao(DaoConfig config) {
        super(config);
    }
    
    public MusicDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MUSIC\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"MEDIA_TYPE\" INTEGER," + // 1: mediaType
                "\"MUSIC_TYPE\" INTEGER," + // 2: musicType
                "\"URL\" TEXT," + // 3: url
                "\"SINGER\" TEXT," + // 4: singer
                "\"AUTHOR\" TEXT," + // 5: author
                "\"POSTER_URL\" TEXT," + // 6: poster_url
                "\"LYRICS_URL\" TEXT," + // 7: lyrics_url
                "\"NAME\" TEXT," + // 8: name
                "\"SIZE\" INTEGER," + // 9: size
                "\"ALBUMS\" TEXT," + // 10: albums
                "\"QUALITY\" INTEGER);"); // 11: quality
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MUSIC\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Music entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer mediaType = entity.getMediaType();
        if (mediaType != null) {
            stmt.bindLong(2, mediaType);
        }
 
        Integer musicType = entity.getMusicType();
        if (musicType != null) {
            stmt.bindLong(3, musicType);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(4, url);
        }
 
        String singer = entity.getSinger();
        if (singer != null) {
            stmt.bindString(5, singer);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(6, author);
        }
 
        String poster_url = entity.getPoster_url();
        if (poster_url != null) {
            stmt.bindString(7, poster_url);
        }
 
        String lyrics_url = entity.getLyrics_url();
        if (lyrics_url != null) {
            stmt.bindString(8, lyrics_url);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(9, name);
        }
 
        Long size = entity.getSize();
        if (size != null) {
            stmt.bindLong(10, size);
        }
 
        String albums = entity.getAlbums();
        if (albums != null) {
            stmt.bindString(11, albums);
        }
 
        Integer quality = entity.getQuality();
        if (quality != null) {
            stmt.bindLong(12, quality);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Music readEntity(Cursor cursor, int offset) {
        Music entity = new Music( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // mediaType
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // musicType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // url
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // singer
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // author
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // poster_url
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // lyrics_url
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // name
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // size
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // albums
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11) // quality
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Music entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMediaType(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setMusicType(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSinger(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAuthor(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPoster_url(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLyrics_url(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSize(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setAlbums(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setQuality(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Music entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Music entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
